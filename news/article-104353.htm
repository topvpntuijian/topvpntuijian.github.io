<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://topvpntuijian.github.io/news/article-104353.htm" />
    <meta charset="utf-8">
    <title>vue3新增特性setup()用法＜与vue2对比＞</title>
        <meta name="description" content="文章目录    setup()   执行时机 setup()的第一个形参props setup()的第二个形参context reactive()   基本语法 定义响应式数据供 template 使" />
        <link rel="icon" href="/assets/website/img/clashvergegithub/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="最佳免费VPN推荐 机场订阅中文网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://topvpntuijian.github.io/news/article-104353.htm" />
    <meta property="og:site_name" content="最佳免费VPN推荐 机场订阅中文网" />
    <meta property="og:title" content="vue3新增特性setup()用法＜与vue2对比＞" />
    <meta property="og:image" content="https://topvpntuijian.github.io/uploads/20240909/addc0574e36a5ab2a8f7c35ebda42360.webp" />
        <meta property="og:release_date" content="2025-04-26T07:38:20" />
    <meta property="og:updated_time" content="2025-04-26T07:38:20" />
        <meta property="og:description" content="文章目录    setup()   执行时机 setup()的第一个形参props setup()的第二个形参context reactive()   基本语法 定义响应式数据供 template 使" />
        
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- Pe-7 icon -->
    <link href="/assets/website/css/clashvergegithub/pe-icon-7.css" rel="stylesheet" type="text/css">
    <!--Slider-->
    <link rel="stylesheet" href="/assets/website/css/clashvergegithub/owl.carousel.min.css">
    <link rel="stylesheet" href="/assets/website/css/clashvergegithub/owl.theme.default.min.css">
    <!-- css -->
    <link href="/assets/website/css/clashvergegithub/bootstrap.min.css" rel="stylesheet" type="text/css">
    <link href="/assets/website/css/clashvergegithub/style.min.css" rel="stylesheet" type="text/css">
    <link rel="stylesheet" href="/assets/website/css/G.css" />

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="vue3新增特性setup()用法＜与vue2对比＞">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-GJ9RVVRN19"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-GJ9RVVRN19');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!-- Loader -->
    <div id="preloader">
        <div id="status">
            <div class="spinner">
                <div class="bounce1"></div>
                <div class="bounce2"></div>
                <div class="bounce3"></div>
            </div>
        </div>
    </div>
    <!--Navbar Start-->
    <nav class="navbar navbar-expand-lg fixed-top navbar-custom sticky sticky-dark align-items-center">
        <div class="container">
            <!-- LOGO -->
            <a class="logo mr-3" href="/">
                            <span>最佳免费VPN推荐</span>
                        </a>
            <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarCollapse" aria-controls="navbarCollapse" aria-expanded="false" aria-label="Toggle navigation">
                <i class="" data-feather="menu"></i>
            </button>
            <div class="collapse navbar-collapse" id="navbarCollapse">
                <ul class="navbar-nav">
                                        <li class="nav-item">
                        <a href="/" class="nav-link">首页</a>
                    </li>
                                        <li class="nav-item">
                        <a href="/free-nodes/" class="nav-link">免费节点</a>
                    </li>
                                        <li class="nav-item">
                        <a href="/paid-subscribe/" class="nav-link">推荐机场</a>
                    </li>
                                        <li class="nav-item">
                        <a href="/news/" class="nav-link">新闻资讯</a>
                    </li>
                                        <li class="nav-item">
                        <a href="/client.htm" class="nav-link">客户端</a>
                    </li>
                                    </ul>
                
            </div>
        </div>
    </nav>
    <!-- Navbar End -->
    <!-- Hero Start -->
    <section class="hero-5-bg position-relative bg-light" id="home" style="height:500px;">
        <div class="container">
            <div class="row">
                <div class="col-lg-6">
                    <div style="margin-top: 4rem;">
                        <h1 class="hero-5-title line-height-1_4 mb-4">vue3新增特性setup()用法＜与vue2对比＞</h1>
                        <p class="text-muted mb-4 pb-3">
                            <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / 正文
                        </p>
                    </div>
                </div>
                <div class="col-lg-6">
                    <img src="/assets/website/img/clashvergegithub/hero-5-img.png" alt="Clash Verge Github hero" class="hero-5-img">
                </div>
            </div>
        </div>
    </section>
    <!-- Hero End -->
    <!-- Features Start -->
    <section class="section" id="features">
        <div class="container">
            <div class="features-content">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="Clash Node官网订阅站" data-url="https://clashnode.github.io">
                <div class="xcblog-blog-detail xcblog-blog-detail-defined">
                      				  				  				<div id="content_views" class="markdown_views prism-atom-one-light"> <div class="toc"> <h3>文章目录</h3> <ul> <li> <ul> <li>setup()</li> <li> <ul> <li>执行时机</li> <li>setup()的第一个形参props</li> <li>setup()的第二个形参context</li> <li>reactive()</li> <li> <ul> <li>基本语法</li> <li>定义响应式数据供 template 使用</li> </ul> </li> <li>ref()</li> <li> <ul> <li>基本语法</li> <li>在 template 中访问 ref 创建的响应式数据</li> <li>在 reactive 对象中访问 ref 创建的响应式数据</li> </ul> </li> <li>isRef()</li> <li>toRefs()</li> </ul> </li> </ul> </li> </ul> </div> <h2>setup()</h2> <p><code>setup()</code> 函数是 vue3 中，专门为组件提供的新属性。它为我们使用 vue3 的<code>Composition API</code> 新特性提供了统一的入口。</p> <h3>执行时机</h3> <p><strong>setup</strong> 函数会在<strong>beforeCreate</strong> 之后、<strong>created</strong> 之前执行</p> <h3>setup()的第一个形参props</h3> <p>父组件</p> <pre><code>&lt;set-up p1="aaaa"&gt;&lt;/set-up&gt;</code></pre> <p>子组件set-up</p> <pre><code class="prism language-js"><span class="token comment">// 在props中定义当前组件允许外界传递过来的参数名称：</span><span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token literal-property property">p1</span><span class="token operator">:</span> String<span class="token punctuation">}</span>，<span class="token comment">// 通过setup函数的第一个形参，接收props数据：</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>p1<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre> <p>在vue2中子组件是这样写</p> <pre><code class="prism language-javascript"><span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token literal-property property">p1</span><span class="token operator">:</span> String<span class="token punctuation">}</span><span class="token comment">// 为了让p1不仅可读，还可写，赋值给data</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token punctuation">{<!-- --></span><span class="token literal-property property">p1</span><span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>p1<span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>区别就是vue3将data和props的数据都写在了一起</p> <h3>setup()的第二个形参context</h3> <p><code>setup</code> 函数的第二个形参是一个<strong>上下文对象</strong>，这个上下文对象中包含了一些有用的属性，这些属性在<code>vue 2.x</code> 中需要通过<code>this</code> 才能访问到，在<code>vue 3.x</code> 中，它们的访问方式如下：</p> <pre><code class="prism language-js"><span class="token keyword">const</span> MyComponent<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>     context<span class="token punctuation">.</span>attrs     context<span class="token punctuation">.</span>slots     context<span class="token punctuation">.</span>parent     context<span class="token punctuation">.</span>root     context<span class="token punctuation">.</span>emit     context<span class="token punctuation">.</span>refs<span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <blockquote> <p>注意：在<code>setup()</code> 函数中无法访问到<code>this</code></p> </blockquote> <h3>reactive()</h3> <p><code>reactive()</code> 函数接收一个普通对象，返回一个响应式的数据对象。</p> <h4>基本语法</h4> <p>等价于<code>vue 2.x</code> 中的<code>Vue.observable()</code> 函数，<code>vue 3.x</code> 中提供了<code>reactive()</code> 函数，用来创建响应式的数据对象，基本代码示例如下：</p> <pre><code class="prism language-js"><span class="token keyword">import</span><span class="token punctuation">{<!-- --></span> reactive<span class="token punctuation">}</span><span class="token keyword">from</span><span class="token string">'@vue/composition-api'</span><span class="token comment">// 创建响应式数据对象，得到的 state 类似于 vue 2.x 中 data() 返回的响应式对象</span><span class="token keyword">const</span> state<span class="token operator">=</span><span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span><span class="token literal-property property">count</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre> <h4>定义响应式数据供 template 使用</h4> <ol> <li> <p>按需导入<code>reactive</code> 函数：</p> <pre><code class="prism language-js"><span class="token keyword">import</span><span class="token punctuation">{<!-- --></span> reactive<span class="token punctuation">}</span><span class="token keyword">from</span><span class="token string">'vue'</span></code></pre> </li> <li> <p>在<code>setup()</code> 函数中调用<code>reactive()</code> 函数，创建响应式<mark>数据对象</mark>：</p> <pre><code class="prism language-js"><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 创建响应式数据对象</span><span class="token keyword">const</span> state<span class="token operator">=</span><span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span><span class="token literal-property property">count</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// setup 函数中将响应式数据对象 return 出去，供 template 使用</span><span class="token keyword">return</span> state<span class="token punctuation">}</span></code></pre> <p><mark>注意：必须return才能在界面上用，reactive()里面必须是对象</mark></p> </li> <li> <p>在<code>template</code> 中访问响应式数据：</p> <pre><code class="prism language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>当前的 count 值为：{<!-- -->{count}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span></code></pre> </li> </ol> <p>vue2的响应式则相对简单，直接在data中定义即可</p> <h3>ref()</h3> <h4>基本语法</h4> <p><code>ref()</code> 函数用来根据给定的值创建一个<strong>响应式</strong>的<strong>数据对象</strong>，<code>ref()</code> 函数调用的<mark>返回值是一个对象</mark>，这个对象上只包含一个<code>.value</code> 属性：</p> <pre><code class="prism language-js"><span class="token keyword">import</span><span class="token punctuation">{<!-- --></span> ref<span class="token punctuation">}</span><span class="token keyword">from</span><span class="token string">'vue'</span><span class="token comment">// 创建响应式数据对象 count，初始值为 0</span><span class="token keyword">const</span> count<span class="token operator">=</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">// 如果要访问 ref() 创建出来的响应式数据对象的值，必须通过 .value 属性才可以</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token comment">// 输出 0</span><span class="token comment">// 让 count 的值 +1</span> count<span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token comment">// 再次打印 count 的值</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token comment">// 输出 1</span></code></pre> <h4>在 template 中访问 ref 创建的响应式数据</h4> <ol> <li> <p>在<code>setup()</code> 中创建响应式数据：</p> <pre><code class="prism language-js"><span class="token keyword">import</span><span class="token punctuation">{<!-- --></span> ref<span class="token punctuation">}</span><span class="token keyword">from</span><span class="token string">'vue'</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">const</span> count<span class="token operator">=</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">{<!-- --></span>          count<span class="token punctuation">,</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'zs'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> </li> <li> <p>在<code>template</code> 中访问响应式数据：</p> <pre><code class="prism language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{<!-- -->{count}} --- {<!-- -->{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span></code></pre> </li> </ol> <h4>在 reactive 对象中访问 ref 创建的响应式数据</h4> <p>当把<code>ref()</code> 创建出来的响应式数据对象，挂载到<code>reactive()</code> 上时，会自动把响应式数据对象<strong>展开为原始的值</strong>，不需通过<code>.value</code> 就可以直接被访问，例如：</p> <pre><code class="prism language-js"><span class="token keyword">const</span> count<span class="token operator">=</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">const</span> state<span class="token operator">=</span><span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>   count<span class="token punctuation">}</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token comment">// 输出 0</span> state<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token comment">// 此处不需要通过 .value 就能直接访问原始值</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token comment">// 输出 1</span></code></pre> <blockquote> <p><strong>注意：新的 ref 会覆盖旧的 ref</strong>，示例代码如下：</p> </blockquote> <pre><code class="prism language-js"><span class="token comment">// 创建 ref 并挂载到 reactive 中</span><span class="token keyword">const</span> c1<span class="token operator">=</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">const</span> state<span class="token operator">=</span><span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>   c1<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 再次创建 ref，命名为 c2</span><span class="token keyword">const</span> c2<span class="token operator">=</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token comment">// 将 旧 ref c1 替换为 新 ref c2</span> state<span class="token punctuation">.</span>c1<span class="token operator">=</span> c2 state<span class="token punctuation">.</span>c1<span class="token operator">++</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>c1<span class="token punctuation">)</span><span class="token comment">// 输出 10</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c2<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token comment">// 输出 10</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token comment">// 输出 0</span></code></pre> <h3>isRef()</h3> <p><code>isRef()</code> 用来判断某个值是否为<code>ref()</code> 创建出来的对象；应用场景：当需要展开某个可能为<code>ref()</code> 创建出来的值的时候，例如：</p> <pre><code class="prism language-js"><span class="token keyword">import</span><span class="token punctuation">{<!-- --></span> isRef<span class="token punctuation">}</span><span class="token keyword">from</span><span class="token string">'@vue/composition-api'</span><span class="token keyword">const</span> unwrapped<span class="token operator">=</span><span class="token function">isRef</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token operator">?</span> foo<span class="token punctuation">.</span>value<span class="token operator">:</span> foo</code></pre> <h3>toRefs()</h3> <p><code>toRefs()</code> 函数可以将<code>reactive()</code> 创建出来的响应式对象，转换为普通的对象，只不过，这个对象上的每个属性节点，都是<code>ref()</code> 类型的响应式数据，最常见的应用场景如下：</p> <pre><code class="prism language-js"><span class="token keyword">import</span><span class="token punctuation">{<!-- --></span> toRefs<span class="token punctuation">}</span><span class="token keyword">from</span><span class="token string">'vue'</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 定义响应式数据对象</span><span class="token keyword">const</span> state<span class="token operator">=</span><span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span><span class="token literal-property property">count</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 定义页面上可用的事件处理函数</span><span class="token keyword">const</span><span class="token function-variable function">increment</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{<!-- --></span>       state<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">}</span><span class="token comment">// 在 setup 中返回一个对象供页面使用</span><span class="token comment">// 这个对象中可以包含响应式的数据，也可以包含事件处理函数</span><span class="token keyword">return</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 将state上的每个属性，都转化为ref形式的响应式数据</span><span class="token comment">// ...是展开运算符</span><span class="token operator">...</span><span class="token function">toRefs</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">// 自增的事件处理函数</span>       increment<span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>页面上可以直接访问<code>setup()</code> 中 return 出来的响应式数据：</p> <pre><code class="prism language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>当前的count值为：{<!-- -->{count}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>increment<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>+1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span></code></pre> <p>总结：</p> <ul> <li>setup(props,context)，props用来接收组件传来的内容，context用来代替setup()里的this</li> <li>reactive()用来接收一个<strong>对象</strong>，用于创建响应式数据对象，必须要return出去；（不建议使用） <ul> <li>使用的是接收对象里的属性</li> </ul> </li> <li>ref()用来接收一个<strong>值</strong>，用于创建响应式数据对象，返回的是一个对象，必须要return出去。 <ul> <li>在setup()内需通过<code>.value</code> 就可以直接被访问；</li> <li>但是在template中会自动解析，不需要<code>.value</code> ;</li> <li>reactive对象中访问ref创建的响应式数据，也不需要<code>.value</code>；ref的对象会直接变成reactive的属性</li> <li>新的 ref 会覆盖旧的 ref</li> </ul> </li> </ul> </div> 			                </div>
                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-103525.htm">领养狗狗的平台（领养狗狗的平台不限制地区）</a></p>
                                        <p>下一个：<a href="/news/article-104354.htm">go语言编译过程概述</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-94580.htm" title="新疆的宠物（新疆的宠物食品品牌）">新疆的宠物（新疆的宠物食品品牌）</a></li>
                        <li class="py-2"><a href="/news/article-92347.htm" title="动物疫苗的使用方法及注意事项视频教程（动物疫苗的使用方法及注意事项视频教程大全）">动物疫苗的使用方法及注意事项视频教程（动物疫苗的使用方法及注意事项视频教程大全）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-4-19-free-subscribe-node.htm" title="最佳免费VPN推荐 | 4月19日18.9M/S|免费V2ray/SSR/Clash/Shadowrocket订阅机场">最佳免费VPN推荐 | 4月19日18.9M/S|免费V2ray/SSR/Clash/Shadowrocket订阅机场</a></li>
                        <li class="py-2"><a href="/news/article-97525.htm" title="动物疫苗的使用方法及注意事项视频讲解图片下载（动物疫苗知识）">动物疫苗的使用方法及注意事项视频讲解图片下载（动物疫苗知识）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-4-16-free-subscribe-node.htm" title="最佳免费VPN推荐 | 4月16日22.8M/S|免费Clash/V2ray/Shadowrocket/SSR订阅机场">最佳免费VPN推荐 | 4月16日22.8M/S|免费Clash/V2ray/Shadowrocket/SSR订阅机场</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-4-9-free-high-speed-nodes.htm" title="最佳免费VPN推荐 | 4月9日22.2M/S|免费Clash/V2ray/Shadowrocket/SSR订阅机场">最佳免费VPN推荐 | 4月9日22.2M/S|免费Clash/V2ray/Shadowrocket/SSR订阅机场</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-4-8-free-v2ray.htm" title="最佳免费VPN推荐 | 4月8日18.5M/S|免费SSR/V2ray/Shadowrocket/Clash订阅机场">最佳免费VPN推荐 | 4月8日18.5M/S|免费SSR/V2ray/Shadowrocket/Clash订阅机场</a></li>
                        <li class="py-2"><a href="/news/article-91592.htm" title="动物医院有什么足够的吸引力呢英文（动物医院用英语怎么读）">动物医院有什么足够的吸引力呢英文（动物医院用英语怎么读）</a></li>
                        <li class="py-2"><a href="/news/article-102714.htm" title="动物接种疫苗的注意事项不包括哪些内容（动物注射疫苗应注意什么）">动物接种疫苗的注意事项不包括哪些内容（动物注射疫苗应注意什么）</a></li>
                        <li class="py-2"><a href="/news/article-99756.htm" title="合肥宠物领养微信群号 合肥宠物领养微信群号是多少">合肥宠物领养微信群号 合肥宠物领养微信群号是多少</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">59</span> <a href="/date/2025-04/" title="2025-04 归档">2025-04</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
    </section>
    <!-- Features End -->
        <!-- Footer Start -->
    <section class="footer" style="background-image: url(/assets/website/img/clashvergegithub/hero-1-bg-img.png)">
        <div class="container">
            <div class="row">
                <div class="col-lg-12">
                    <div class="text-center">
                        <p class="text-white-50 f-15 mb-0">
                                                <p>
                                                <a href="/">首页</a> |
                                                <a href="/free-nodes/">免费节点</a> |
                                                <a href="/paid-subscribe/">推荐机场</a> |
                                                <a href="/news/">新闻资讯</a> |
                                                <a href="/client.htm">客户端</a> |
                                                <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
                            <a href="/">最佳免费VPN推荐 机场订阅中文网</a> 版权所有 Powered by WordPress
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <!-- Footer End -->
    <!-- javascript -->
    <script src="/assets/website/js/frontend/clashvergegithub/jquery.min.js"></script>
    <script src="/assets/website/js/frontend/clashvergegithub/bootstrap.bundle.min.js"></script>
    <script src="/assets/website/js/frontend/clashvergegithub/jquery.easing.min.js"></script>
    <!-- feather icons -->
    <script src="/assets/website/js/frontend/clashvergegithub/feather-icons.js"></script>
    <!-- carousel -->
    <script src="/assets/website/js/frontend/clashvergegithub/owl.carousel.min.js"></script>
    <!-- Main Js -->
    <script src="/assets/website/js/frontend/clashvergegithub/app.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>